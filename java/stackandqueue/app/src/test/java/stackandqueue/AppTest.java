/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stackandqueue;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

//  @Test void pushTest() {
//    Stack stackTest = new Stack();
//    stackTest.push("20");
//    stackTest.push("25");
//    stackTest.push("88");
//    stackTest.push("-1");
//    String expected = "{-1} -> {88} -> {25} -> {20} -> {Null}";
//    assertEquals(expected, stackTest.toString());
//  }
//
//  @Test void pushMultiTest() {
//    Stack stackTest = new Stack();
//    stackTest.push("20");
//    stackTest.push("25");
//    stackTest.push("88");
//    stackTest.push("-1");
//    stackTest.push("45");
//    stackTest.push("46");
//    stackTest.push("47");
//    stackTest.push("48");
//
//    String expected = "{48} -> {47} -> {46} -> {45} -> {-1} -> {88} -> {25} -> {20} -> {Null}";
//    assertEquals(expected, stackTest.toString());
//  }
//
//  @Test void popTest() {
//    Stack stackTest = new Stack();
//    stackTest.push("20");
//    stackTest.push("25");
//    stackTest.push("88");
//    stackTest.push("-1");
//    String expected = "{-1} -> {88} -> {25} -> {20} -> {Null}";
//    assertEquals(expected, stackTest.toString());
//    stackTest.pop();
//    String expected1 = "{88} -> {25} -> {20} -> {Null}";
//    assertEquals(expected1, stackTest.toString());
//  }
//
//  @Test void popMultiTest() {
//    Stack stackTest = new Stack();
//    stackTest.push("20");
//    stackTest.push("25");
//    stackTest.push("88");
//    stackTest.push("-1");
//    stackTest.pop();
//    stackTest.pop();
//    stackTest.pop();
//    stackTest.pop();
//    String expected = "The List is empty";
//    assertEquals(expected, stackTest.toString());
//  }
//
//  @Test void peekTest() {
//    Stack stackTest = new Stack();
//    stackTest.push("20");
//    stackTest.push("25");
//    stackTest.push("88");
//    stackTest.push("-1");
//    String expected = "-1";
//    assertEquals(expected, stackTest.peek());
//  }

  @Test void instEmptyTest() {
    Stack stackTest = new Stack();
    boolean expected = true;
    assertEquals(expected, stackTest.isEmpty());
  }

  @Test void popEmptyTest() {
    Stack stackTest = new Stack();
    String expected = "The List is empty";
    assertEquals(expected, stackTest.pop());
    assertEquals(expected, stackTest.peek());
  }

  @Test void enqueueTest() {
    Queue queueTest = new Queue();
    queueTest.enqueue("20");
    queueTest.enqueue("25");
    queueTest.enqueue("88");
    queueTest.enqueue("-1");
    String expected = "{20} -> {25} -> {88} -> {-1} -> {Null}";
    assertEquals(expected, queueTest.toString());
  }

  @Test void enqueueMultiTest() {
    Queue queueTest = new Queue();
    queueTest.enqueue("20");
    queueTest.enqueue("25");
    queueTest.enqueue("88");
    queueTest.enqueue("-1");
    queueTest.enqueue("45");
    queueTest.enqueue("46");
    queueTest.enqueue("47");
    queueTest.enqueue("48");

    String expected = "{20} -> {25} -> {88} -> {-1} -> {45} -> {46} -> {47} -> {48} -> {Null}";
    assertEquals(expected, queueTest.toString());
  }

  @Test void dequeueTest() {
    Queue queueTest = new Queue();
    queueTest.enqueue("20");
    queueTest.enqueue("25");
    queueTest.enqueue("88");
    queueTest.enqueue("-1");
    String expected = "20";
    assertEquals(expected, queueTest.dequeue());
  }

  @Test void peekQueueTest() {
    Queue queueTest = new Queue();
    queueTest.enqueue("20");
    queueTest.enqueue("25");
    queueTest.enqueue("88");
    queueTest.enqueue("-1");
    String expected = "{20} -> {25} -> {88} -> {-1} -> {Null}";
    assertEquals(expected, queueTest.peek());
  }

  @Test void emptyQueueTest() {
    Queue queueTest = new Queue();
    queueTest.enqueue("20");
    queueTest.enqueue("25");
    queueTest.enqueue("88");
    queueTest.enqueue("-1");
    queueTest.dequeue();
    queueTest.dequeue();
    queueTest.dequeue();
    queueTest.dequeue();
    String expected = "The List is empty";
    assertEquals(expected, queueTest.toString());
  }

  @Test void instemptyQueueTest() {
    Queue queueTest = new Queue();
    boolean expected = true;
    assertEquals(expected, queueTest.isEmpty());
  }

  @Test void peekEmptyQueueTest() {
    Queue queueTest = new Queue();
    String expected = "The List is empty";
    assertEquals(expected, queueTest.peek());
  }

  @Test void enqueuePesudoQueue(){
    PseudoQueue pseudoTest=new PseudoQueue();
    pseudoTest.enqueue("20");
    pseudoTest.enqueue("25");
    pseudoTest.enqueue("88");
    pseudoTest.enqueue("-1");
    String expected = "{-1} -> {88} -> {25} -> {20} -> {Null}";
    assertEquals(expected,pseudoTest.toString());
  }

  @Test void dequeuePesudoQueue(){
    PseudoQueue pseudoTest=new PseudoQueue();
    pseudoTest.enqueue("20");
    pseudoTest.enqueue("25");
    pseudoTest.enqueue("88");
    pseudoTest.enqueue("-1");
    pseudoTest.dequeue();
    String expected = "{-1} -> {88} -> {25} -> {Null}";
    assertEquals(expected,pseudoTest.toString());
  }

  @Test void AnimalNullTest(){
    AnimalShelter Animal = new AnimalShelter();
    Animal.enqueue(new Cat("Cat"));
    Animal.enqueue(new Dog("Dog"));
    Animal.dequeue("catList");
    Animal.dequeue("dogList");
    String expected = "AnimalShelter{catList=The List is empty, dogList=The List is empty}";
    assertEquals(expected,Animal.toString());
  }


  @Test void AnimalShelterTest(){
    AnimalShelter Animal = new AnimalShelter();
    Animal.enqueue(new Cat("Cat1"));
    Animal.enqueue(new Cat("Cat2"));
    Animal.enqueue(new Cat("Cat3"));
    Animal.enqueue(new Dog("Dog1"));
    Animal.enqueue(new Dog("Dog2"));
    Animal.dequeue("catList");
    Animal.dequeue("catList");
    Animal.dequeue("dogList");
    String expected = "AnimalShelter{catList={Cat3} -> {Null}, dogList={Dog2} -> {Null}}";

    assertEquals(expected,Animal.toString());
  }

  @Test
  void test1() {
    Brackets BracketsTest= new Brackets();
    String test= "{{}}"; // true
    String test1= "{}"; // true
    String test2= "{{(}}"; // false
    String test3= "{{))}}"; // false

    assertEquals(true, BracketsTest.validateBrackets(test));
    assertEquals(true, BracketsTest.validateBrackets(test1));
    assertEquals(false, BracketsTest.validateBrackets(test2));
    assertEquals(false, BracketsTest.validateBrackets(test3));
  }

  @Test
  void duckTest(){
    Queue queueDucke = new Queue();
    queueDucke.enqueue("2");
    queueDucke.enqueue("3");
    queueDucke.enqueue("4");
    queueDucke.enqueue("5");
    queueDucke.enqueue("6");
    queueDucke.enqueue("7");
    String exp = "asasas";

    assertEquals("asadasd", queueDucke.toString());


  }

}
