/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

  @Test void graphTest1() {
    Graph graph = new Graph();
    Node n1 = new Node("A");
    Node n2 = new Node("B");
    Node n3 = new Node("C");
    Node n4 = new Node("D");
    assertEquals("[]", graph.graphList.toString());
    graph.addNode(n1);
    assertTrue(graph.graphList.contains(n1));
  }

  @Test void graphTest2() {
    Graph graph = new Graph();
    Node n1 = new Node("A");
    Node n2 = new Node("B");
    Node n3 = new Node("C");
    Node n4 = new Node("D");
    assertEquals("[]", graph.graphList.toString());
    graph.addNode(n2);
    assertTrue(graph.graphList.contains(n2));
  }

  @Test void graphTest3() {
    Graph graph = new Graph();
    Node n1 = new Node("A");
    Node n2 = new Node("B");
    Node n3 = new Node("C");
    Node n4 = new Node("D");
    assertEquals("[]", graph.graphList.toString());
    graph.addNode(n1);
    graph.addNode(n2);
    graph.addNode(n3);
    graph.addNode(n4);

    assertEquals("[A, B, C, D]", graph.toString());
  }

  @Test void graphTest4() {
    Graph graph = new Graph();
    Node n1 = new Node("A");
    Node n2 = new Node("B");
    Node n3 = new Node("C");
    Node n4 = new Node("D");
    assertEquals("[]", graph.graphList.toString());
    graph.addNode(n1);
    graph.addNode(n2);
    graph.addNode(n3);
    graph.addNode(n4);

    assertEquals("[A, B, C, D]", graph.toString());

  }

  @Test void graphBreadthFirstTest1() {
    Graph breadthFirst = new Graph();
    Node n1 = new Node("A");
    Node n2 = new Node("B");
    Node n3 = new Node("C");
    Node n4 = new Node("D");

    breadthFirst.addNode(n1);
    breadthFirst.addNode(n2);

    assertEquals("[A]", breadthFirst.breadthFirst(n1).toString());
    breadthFirst.addEdge(n1, n2);
    assertEquals("[A, B]", breadthFirst.breadthFirst(n1).toString());
  }

  @Test void graphBreadthFirstTest2() {
    Graph breadthFirst = new Graph();
    Node n1 = new Node("A");
    Node n2 = new Node("B");
    Node n3 = new Node("C");
    Node n4 = new Node("D");

    breadthFirst.addNode(n1);
    breadthFirst.addNode(n2);
    breadthFirst.addNode(n3);
    breadthFirst.addEdge(n1, n2);
    breadthFirst.addEdge(n1, n3);
    assertEquals("[A, B, C]", breadthFirst.breadthFirst(n1).toString());
  }

  @Test void graphBreadthFirstTest3() {
    Graph breadthFirst = new Graph();
    Node n1 = new Node("A");
    Node n2 = new Node("B");
    Node n3 = new Node("C");
    Node n4 = new Node("D");

    breadthFirst.addNode(n1);
    breadthFirst.addNode(n2);
    breadthFirst.addNode(n3);
    breadthFirst.addNode(n4);

    breadthFirst.addEdge(n1, n2);
    breadthFirst.addEdge(n1, n3);
    breadthFirst.addEdge(n1, n4);
    assertEquals("[B, C, D]", breadthFirst.breadthFirst(n2).toString());
  }
}

