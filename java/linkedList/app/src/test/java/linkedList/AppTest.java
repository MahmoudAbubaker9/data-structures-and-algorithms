/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linkedList;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
  @Test void emptyTest() {
    LinkedList emptyList = new LinkedList();
    String expected="NULL";
    assertEquals(expected,emptyList.toString());
  }

  @Test void InsertListTest() {

    /////////// Lab 5 Test

    LinkedList testList = new LinkedList();
    testList.insert("9");
    testList.insert("2");
    testList.insert("13");
    testList.insert("14");
    String expected="{14} -> {13} -> {2} -> {9} -> NULL";
    assertEquals(expected,testList.toString());

  }

  @Test void headPropertyListTest() {
    LinkedList testList = new LinkedList();
    testList.insert("1");
    testList.insert("2");
    testList.insert("3");
    testList.insert("4");
    int expected=4;
    assertEquals(expected,testList.head.value);
  }

  @Test void MultiNodeTest() {
    LinkedList testList = new LinkedList();
    testList.insert("9");
    testList.insert("8");
    testList.insert("3");
    testList.insert("1");
    testList.insert("31");
    String expected="{31} -> {1} -> {3} -> {8} -> {9} -> NULL";
    assertEquals(expected,testList.toString());
  }

  @Test void includeTest() {
    LinkedList testList = new LinkedList();
    testList.insert("5");
    testList.insert("4");
    testList.insert("13");
    testList.insert("2");
    testList.insert("11");
    assertTrue(testList.includes("5"));
    assertFalse(testList.includes("6"));

  }

  @Test void returnCollectionTest() {
    LinkedList testList = new LinkedList();
    testList.insert("20");
    testList.insert("25");
    testList.insert("88");
    testList.insert("-1");
    testList.insert("45");
    String expected="{45} -> {-1} -> {88} -> {25} -> {20} -> NULL";
    assertEquals(expected,testList.toString());
  }

  /////////// Lab 6 Test

  @Test void appendTest () {
    LinkedList testList = new LinkedList();
    testList.append("20");
    testList.append("25");
    testList.append("88");
    testList.append("-1");
    testList.append("45");
    String expected="{20} -> {25} -> {88} -> {-1} -> {45} -> NULL";
    assertEquals(expected,testList.toString());
  }

  @Test void appendMultipleTest () {
    LinkedList testList = new LinkedList();
    testList.append("20");
    testList.append("25");
    testList.append("88");
    testList.append("-1");
    testList.append("45");
    testList.append("46");
    testList.append("47");
    testList.append("48");
    testList.append("49");

    String expected="{20} -> {25} -> {88} -> {-1} -> {45} -> {46} -> {47} -> {48} -> {49} -> NULL";
    assertEquals(expected,testList.toString());
  }

  @Test void insertMiddle () {
    LinkedList testList = new LinkedList();
    testList.append("20");
    testList.append("25");
    testList.append("88");
    testList.append("-1");
    testList.insertBefore("88","-55");
    String expected="{20} -> {25} -> {-55} -> {88} -> {-1} -> NULL";
    assertEquals(expected,testList.toString());
  }

  @Test void beforeFirstNode () {
    LinkedList testList = new LinkedList();
    testList.append("20");
    testList.append("25");
    testList.append("88");
    testList.append("-1");
    testList.insertBefore("20","-55");
    String expected="{-55} -> {20} -> {25} -> {88} -> {-1} -> NULL";
    assertEquals(expected,testList.toString());
  }

  @Test void insertAfterMiddle () {
    LinkedList testList = new LinkedList();
    testList.append("20");
    testList.append("25");
    testList.append("88");
    testList.append("-1");
    testList.insertAfter("25","-55");
    String expected="{20} -> {25} -> {-55} -> {88} -> {-1} -> NULL";
    assertEquals(expected,testList.toString());
  }

  @Test void insertAfterLast () {
    LinkedList testList = new LinkedList();
    testList.append("20");
    testList.append("25");
    testList.append("88");
    testList.append("-1");
    testList.insertAfter("-1","-55");
    String expected="{20} -> {25} -> {88} -> {-1} -> {-55} -> NULL";
    assertEquals(expected,testList.toString());
  }

  /////////// Lab 7 Test

  @Test void kthGreaterTest () {
    LinkedList testList = new LinkedList();
    testList.append("20");
    testList.append("25");
    testList.append("88");
    testList.append("-1");
    String output = testList.kthFromEnd(10);
    String expected="Exception -> the number should be from 0 to 4 (Node Length)";
    assertEquals(expected,output);
  }

  @Test void kthSameLengthTest () {
    LinkedList testList = new LinkedList();
    testList.append("20");
    testList.append("25");
    testList.append("88");
    testList.append("-1");
    String expected="{4th node value from the end is: {20}";
    String output = testList.kthFromEnd(4);
    assertEquals(expected,output);
  }

  @Test void kthMinusValueTest () {
    LinkedList testList = new LinkedList();
    testList.append("20");
    testList.append("25");
    testList.append("88");
    testList.append("-1");
    String output = testList.kthFromEnd(-1);
    String expected="Exception -> the number should be from 0 to 4 (Node Length)";
    assertEquals(expected,output);
  }

  @Test void kthNodeSizeOneTest () {
    LinkedList testList = new LinkedList();
    testList.append("20");
    String output = testList.kthFromEnd(1);
    String expected="{1th node value from the end is: {20}";
    assertEquals(expected,output);
  }

  @Test void kthHappyPathTest () {
    LinkedList testList = new LinkedList();
    testList.append("20");
    testList.append("25");
    testList.append("88");
    testList.append("-1");
    testList.append("-55");
    String output = testList.kthFromEnd(3);
    String expected="{3th node value from the end is: {88}";
    assertEquals(expected,output);
  }

  /////////// Lab 8 Test
  @Test void zipHappyTest () {
    LinkedList testList1 = new LinkedList();
    LinkedList testList2 = new LinkedList();
    testList1.append("20");
    testList1.append("25");
    testList1.append("88");
    testList1.append("-1");
    testList2.append("45");
    testList2.append("46");
    testList2.append("47");
    testList2.append("48");

    LinkedList testAllList = new LinkedList();
    testAllList.head = testAllList.zipLists(testList1,testList2);
    String expected = "{20} -> {45} -> {25} -> {46} -> {88} -> {47} -> {-1} -> {48} -> NULL";

    assertEquals( expected , testAllList.toString());
  }

  @Test void oneZipEmptyTest () {
    LinkedList testList1 = new LinkedList();
    LinkedList testList2 = new LinkedList();
    testList1.append("20");
    testList1.append("25");
    testList1.append("88");
    testList1.append("-1");


    LinkedList testAllList = new LinkedList();
    testAllList.head = testAllList.zipLists(testList1,testList2);
    String expected = "{20} -> {25} -> {88} -> {-1} -> NULL";

    assertEquals( expected , testAllList.toString());
  }

}
